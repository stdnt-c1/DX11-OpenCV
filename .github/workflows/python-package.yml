name: Python Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        lfs: true

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: pip
        cache-dependency-path: |
          requirements.txt
          setup.py

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install setuptools wheel build ninja cmake
        pip install -r requirements.txt

    - name: Install OpenCV
      run: |
        python -m pip install opencv-python==4.11.0 || python -m pip install "opencv-python>=4.0.0"

    - name: Set OpenCV Path
      shell: cmd
      run: |
        for /f "tokens=*" %%i in ('python -c "import os, cv2; print(os.path.dirname(cv2.__file__))"') do set "OPENCV_DIR=%%i"
        echo OpenCV_DIR=%OPENCV_DIR%
        echo CMAKE_PREFIX_PATH=%OPENCV_DIR% >> $GITHUB_ENV

    - name: Configure CMake
      shell: cmd
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 ^
        -DPYBIND11_PYTHON_VERSION=${{ matrix.python-version }} ^
        -DOpenCV_DIR="%OPENCV_DIR%" ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DBUILD_TESTING=ON

    - name: Build
      shell: cmd
      run: |
        cmake --build build --config Release
        if errorlevel 1 (
          echo "Build failed - checking logs"
          if exist build\CMakeFiles\CMakeError.log type build\CMakeFiles\CMakeError.log
          if exist build\CMakeFiles\CMakeOutput.log type build\CMakeFiles\CMakeOutput.log
          exit /b 1
        )

    - name: Install package
      shell: cmd
      run: |
        python -m pip install -e .

    - name: Run tests
      shell: cmd
      run: |
        python -m pytest tests/ --cov=dx11_renderer --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Build wheel
      shell: cmd
      run: |
        python -m build --wheel
        if errorlevel 1 (
          echo "Wheel build failed"
          if exist log\wheel_build_log.txt type log\wheel_build_log.txt
          exit /b 1
        )

    - name: Store package
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/*.whl
        retention-days: 7

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}