on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        lfs: true

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: pip
        cache-dependency-path: |
          requirements.txt
          setup.py

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel build twine ninja cmake
        pip install -r requirements.txt

    - name: Build wheel
      shell: cmd
      run: |
        python -m build --wheel --no-isolation
        if errorlevel 1 (
          echo "Wheel build failed"
          if exist log\wheel_build_log.txt type log\wheel_build_log.txt
          exit /b 1
        )

    - name: Verify package contents
      run: |
        python -m pip install dist\*.whl --force-reinstall
        python -c "import dx11_renderer; print('Module imported successfully')"
        python -c "import dx11_renderer.core; print('Core module imported successfully')"

    - name: Store wheel
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ matrix.python-version }}-wheel
        path: dist/*.whl
        if-no-files-found: error
        retention-days: 7

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: python-*-wheel
        path: dist
        merge-multiple: true

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade twine

    - name: List wheels
      run: |
        ls -l dist/

    - name: Check wheels
      run: |
        python -m twine check dist/*.whl

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload --skip-existing dist/*.whl