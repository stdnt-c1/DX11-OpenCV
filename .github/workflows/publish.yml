name: Publish to PyPI

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        lfs: true

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: pip
        cache-dependency-path: |
          requirements.txt
          setup.py

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel build twine ninja cmake
        pip install -r requirements.txt
        
    - name: Install OpenCV
      run: |
        python -m pip install opencv-python==4.11.0 || python -m pip install "opencv-python>=4.0.0"

    - name: Set OpenCV Path
      shell: cmd
      run: |
        for /f "tokens=*" %%i in ('python -c "import os, cv2; print(os.path.dirname(cv2.__file__))"') do set "OPENCV_DIR=%%i"
        echo OpenCV_DIR=%OPENCV_DIR%
        echo CMAKE_PREFIX_PATH=%OPENCV_DIR% >> $GITHUB_ENV

    - name: Configure CMake
      shell: cmd
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 ^
        -DPYBIND11_PYTHON_VERSION=${{ matrix.python-version }} ^
        -DOpenCV_DIR="%OPENCV_DIR%" ^
        -DCMAKE_BUILD_TYPE=Release

    - name: Build C++ library
      shell: cmd
      run: |
        cmake --build build --config Release
        if errorlevel 1 (
          echo "Build failed - checking logs"
          if exist build\CMakeFiles\CMakeError.log type build\CMakeFiles\CMakeError.log
          if exist build\CMakeFiles\CMakeOutput.log type build\CMakeFiles\CMakeOutput.log
          exit /b 1
        )

    - name: Build wheel
      shell: cmd
      run: |
        python -m build --wheel --no-isolation
        if errorlevel 1 (
          echo "Wheel build failed"
          if exist log\wheel_build_log.txt type log\wheel_build_log.txt
          exit /b 1
        )

    - name: Test wheel
      shell: cmd
      run: |
        python -m pip install --force-reinstall dist\*.whl
        python -c "import dx11_renderer; print('Import test successful')"

    - name: Store wheel
      uses: actions/upload-artifact@v4
      with:
        name: python-${{ matrix.python-version }}-wheel
        path: dist/*.whl
        if-no-files-found: error
        retention-days: 7

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: python-*-wheel
        path: dist
        merge-multiple: true

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade twine

    - name: List wheels
      run: |
        ls -l dist/

    - name: Check wheels
      run: |
        python -m twine check dist/*.whl

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload --skip-existing dist/*.whl