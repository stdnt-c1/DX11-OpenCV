name: Build and Publish Package

on:
  push:
    tags: ['v*']
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        architecture: ['x64']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install build twine ninja pybind11 cmake
          pip install -r requirements.txt

      - name: Configure CMake
        shell: cmd
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" ^
          -A x64 ^
          -DPYBIND11_PYTHON_VERSION=${{ matrix.python-version }} ^
          -DCMAKE_BUILD_TYPE=Release

      - name: Build C++ library
        shell: cmd
        run: |
          cmake --build build --config Release --parallel
          if errorlevel 1 exit /b 1
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: 4

      - name: Build wheel
        shell: cmd
        run: |
          python -m build --wheel --no-isolation
          if errorlevel 1 exit /b 1

      - name: Verify wheel contents
        shell: cmd
        run: |
          python -m pip install dist\*.whl --force-reinstall
          python -c "import dx11_renderer; print('Import successful')"
          if errorlevel 1 exit /b 1

      - name: Store wheel
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ matrix.python-version }}-wheel
          path: dist/*.whl
          if-no-files-found: error
          retention-days: 7

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: python-*-wheel
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade twine

      - name: List wheels
        run: |
          ls -l dist/

      - name: Check wheels
        run: |
          python -m twine check dist/*.whl

      - name: Upload to PyPI
        if: success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*.whl
