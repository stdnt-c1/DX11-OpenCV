name: Publish Python Package

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel build twine
          pip install -r requirements.txt

      - name: Create build directory
        run: |
          cmake -G "Visual Studio 17 2022" -A x64 -S . -B build

      - name: Build wheel
        run: |
          python -m build --wheel
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: 4

      - name: Store wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error
          retention-days: 1

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-py*
          path: dist
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
